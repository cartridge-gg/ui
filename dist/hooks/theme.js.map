{"version":3,"file":"theme.js","sourceRoot":"","sources":["../../src/hooks/theme.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport function useThemeEffect({\n  theme,\n  assetUrl,\n}: {\n  theme: ControllerTheme;\n  assetUrl: string;\n}) {\n  useEffect(() => {\n    if (!theme) return;\n\n    // Helper function to update theme properties\n    const updateThemeProperties = (colorMode: \"light\" | \"dark\") => {\n      // Set icon\n      document.documentElement.style.setProperty(\n        \"--theme-icon-url\",\n        theme.icon.startsWith(\"http\")\n          ? `url(\"${theme.icon}\")`\n          : `url(\"${assetUrl}${theme.icon}\")`,\n      );\n\n      // Set cover\n      if (theme.cover) {\n        const coverValue =\n          typeof theme.cover === \"string\" ? theme.cover : theme.cover[\"dark\"];\n        const coverUrl = coverValue.startsWith(\"http\")\n          ? `url(\"${coverValue}\")`\n          : `url(\"${assetUrl}${coverValue}\")`;\n        document.documentElement.style.setProperty(\n          \"--theme-cover-url\",\n          coverUrl,\n        );\n      }\n\n      // Set colors if they exist\n      if (theme.colors) {\n        if (theme.colors.primary) {\n          const val =\n            typeof theme.colors.primary === \"string\"\n              ? theme.colors.primary\n              : theme.colors.primary[colorMode];\n          document.documentElement.style.setProperty(\"--primary-100\", val);\n        }\n\n        if (theme.colors.primaryForeground) {\n          const val =\n            typeof theme.colors.primaryForeground === \"string\"\n              ? theme.colors.primaryForeground\n              : theme.colors.primaryForeground[colorMode];\n          document.documentElement.style.setProperty(\n            \"--primary-foreground-100\",\n            val,\n          );\n        }\n      }\n    };\n\n    // Set initial values based on current color mode\n    const initialColorMode = document.documentElement.classList.contains(\"dark\")\n      ? \"dark\"\n      : \"light\";\n    updateThemeProperties(initialColorMode);\n\n    // Watch for changes\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        const colorMode = (mutation.target as HTMLElement).classList.contains(\n          \"dark\",\n        )\n          ? \"dark\"\n          : \"light\";\n        updateThemeProperties(colorMode);\n      });\n    });\n\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [theme, assetUrl]);\n}\n\n// dup of @cartridge/controller/types\nexport type ControllerThemeOption = string | ControllerTheme;\n\nexport type ControllerTheme = {\n  name: string;\n  icon: string;\n  cover?: ThemeValue<string>;\n  colors?: ControllerColors;\n};\n\nexport type ControllerColors = {\n  primary?: ControllerColor;\n  primaryForeground?: ControllerColor;\n};\n\nexport type ControllerColor = ThemeValue<string>;\n\nexport type ThemeValue<T> = T | { dark: T; light: T };\n\n/**\n * Custom hook to reactively watch CSS custom property changes\n *\n * This hook will automatically re-render the component when the specified CSS custom property changes.\n * It watches for changes to the document element's style and class attributes, as well as\n * dynamic stylesheet additions/removals.\n *\n * @param propertyName - The CSS custom property name (e.g., \"--theme-cover-url\")\n * @returns The current value of the CSS custom property\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   const coverUrl = useCSSCustomProperty(\"--theme-cover-url\");\n *   const iconUrl = useCSSCustomProperty(\"--theme-icon-url\");\n *\n *   return <div style={{ backgroundImage: coverUrl }} />;\n * }\n * ```\n */\nexport function useCSSCustomProperty(propertyName: string): string {\n  const [value, setValue] = useState(() => {\n    // Get initial value, with fallback for SSR/testing environments\n    if (typeof document === \"undefined\") return \"\";\n    return getComputedStyle(document.documentElement).getPropertyValue(\n      propertyName,\n    );\n  });\n\n  useEffect(() => {\n    // Skip if we're in SSR/testing environment\n    if (typeof document === \"undefined\") return;\n\n    // Function to update the value\n    const updateValue = () => {\n      try {\n        const newValue = getComputedStyle(\n          document.documentElement,\n        ).getPropertyValue(propertyName);\n        setValue(newValue);\n      } catch (error) {\n        console.warn(\n          `Failed to get CSS custom property ${propertyName}:`,\n          error,\n        );\n      }\n    };\n\n    // Create a MutationObserver to watch for changes to the document element\n    // This will catch style attribute changes and class changes that might affect CSS custom properties\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        // Check for attribute changes (style, class) that might affect CSS custom properties\n        if (\n          mutation.type === \"attributes\" &&\n          (mutation.attributeName === \"style\" ||\n            mutation.attributeName === \"class\")\n        ) {\n          updateValue();\n        }\n      });\n    });\n\n    // Watch for changes to the document element's attributes\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"style\", \"class\"],\n    });\n\n    // Cleanup function\n    return () => {\n      observer.disconnect();\n    };\n  }, [propertyName]);\n\n  return value;\n}\n"]}