{"version":3,"file":"address.js","sourceRoot":"","sources":["../../src/components/address.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAwB,EAAE,EAAE,MAAM,SAAS,CAAC;AAClE,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AACnC,OAAO,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAU7C;;GAEG;AACH,MAAM,UAAU,OAAO,CAAC,EACtB,OAAO,EACP,SAAS,EACT,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,QAAQ,GAAG,KAAK,EAChB,SAAS,GAAG,IAAI,EAChB,WAAW,GACE;IACb,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,EAAE;QAC9B,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;QAC1D,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAClC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,MAAM,gBAAgB,GAAG,aAAa,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAEvE,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CACzB,eACE,SAAS,EAAE,EAAE,CACX,wCAAwC,EACxC,SAAS,IAAI,WAAW,EACxB,cAAc,EACd,SAAS,CACV,EACD,OAAO,EAAE,MAAM,aAEd,gBAAgB,EACjB,KAAC,QAAQ,IAAC,IAAI,EAAC,IAAI,GAAG,IAClB,CACP,CAAC,CAAC,CAAC,CACF,eAAM,SAAS,EAAE,EAAE,CAAC,SAAS,IAAI,WAAW,EAAE,cAAc,EAAE,SAAS,CAAC,YACrE,gBAAgB,GACZ,CACR,CAAC;IAEF,IAAI,WAAW,EAAE,CAAC;QAChB,OAAO,CACL,YACE,IAAI,EAAE,WAAW,EACjB,MAAM,EAAC,QAAQ,EACf,GAAG,EAAC,qBAAqB,EACzB,SAAS,EAAC,iBAAiB,EAC3B,OAAO,EAAE,CAAC,CAAsC,EAAE,EAAE,CAClD,QAAQ,IAAI,CAAC,CAAC,cAAc,EAAE,YAG/B,OAAO,GACN,CACL,CAAC;IACJ,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { formatAddress, FormatAddressOptions, cn } from \"@/utils\";\nimport { CopyIcon } from \"./icons\";\nimport { toast } from \"sonner\";\nimport { useCallback } from \"react\";\nimport { addAddressPadding } from \"starknet\";\n\ntype AddressProps = {\n  address: string;\n  className?: string;\n  copyable?: boolean;\n  monospace?: boolean;\n  explorerUrl?: string;\n} & FormatAddressOptions;\n\n/**\n * A component for consistently rendering Starknet addresses across the application\n */\nexport function Address({\n  address,\n  className,\n  size,\n  first,\n  last,\n  copyable = false,\n  monospace = true,\n  explorerUrl,\n}: AddressProps) {\n  const onCopy = useCallback(() => {\n    navigator.clipboard.writeText(addAddressPadding(address));\n    toast.success(\"Address copied\");\n  }, [address]);\n\n  const formattedAddress = formatAddress(address, { first, last, size });\n\n  const content = copyable ? (\n    <div\n      className={cn(\n        \"flex items-center gap-1 cursor-pointer\",\n        monospace && \"font-mono\",\n        \"text-primary\",\n        className,\n      )}\n      onClick={onCopy}\n    >\n      {formattedAddress}\n      <CopyIcon size=\"xs\" />\n    </div>\n  ) : (\n    <span className={cn(monospace && \"font-mono\", \"text-primary\", className)}>\n      {formattedAddress}\n    </span>\n  );\n\n  if (explorerUrl) {\n    return (\n      <a\n        href={explorerUrl}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"hover:underline\"\n        onClick={(e: React.MouseEvent<HTMLAnchorElement>) =>\n          copyable && e.preventDefault()\n        }\n      >\n        {content}\n      </a>\n    );\n  }\n\n  return content;\n}\n"]}