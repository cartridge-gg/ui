{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../src/components/primitives/checkbox.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,iBAAiB,MAAM,0BAA0B,CAAC;AAE9D,OAAO,EAAE,EAAE,EAAE,MAAM,SAAS,CAAC;AAC7B,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AACxC,OAAO,EAAE,YAAY,EAAQ,MAAM,gBAAgB,CAAC;AAiBpD,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAG/B,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE;IACzD,MAAM,SAAS,GAAG,YAAY,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IACzC,OAAO,CACL,KAAC,iBAAiB,CAAC,IAAI,IACrB,GAAG,EAAE,GAAG,EACR,SAAS,EAAE,EAAE,CACX,2GAA2G,EAC3G,SAAS,CACV,EACD,OAAO,EAAE,OAAO,KACZ,KAAK,YAET,KAAC,YAAY,IACX,SAAS,EAAE,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,EACnC,OAAO,EACL,OAAO,KAAK,eAAe;gBACzB,CAAC,CAAC,YAAY;gBACd,CAAC,CAAC,OAAO;oBACP,CAAC,CAAC,OAAO,IAAI,MAAM;oBACnB,CAAC,CAAC,gBAAgB,GAExB,GACqB,CAC1B,CAAC;AACJ,CAAC,CAAC,CAAC;AACH,QAAQ,CAAC,WAAW,GAAG,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC;AAE1D,OAAO,EAAE,QAAQ,EAAE,CAAC","sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\n\nimport { cn } from \"@/utils\";\nimport { CheckboxIcon } from \"../icons\";\nimport { iconVariants, size } from \"../icons/utils\";\n\ntype CheckboxProps = React.ComponentPropsWithoutRef<\n  typeof CheckboxPrimitive.Root\n> & {\n  variant?:\n    | \"line\"\n    | \"solid\"\n    | \"minus-solid\"\n    | \"minus-line\"\n    | \"plus-solid\"\n    | \"plus-line\"\n    | \"unchecked-solid\"\n    | \"unchecked-line\";\n  size?: keyof typeof size;\n};\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  CheckboxProps\n>(({ variant, className, checked, size, ...props }, ref) => {\n  const iconStyle = iconVariants({ size });\n  return (\n    <CheckboxPrimitive.Root\n      ref={ref}\n      className={cn(\n        \"peer flex items-center justify-center shrink-0 rounded-sm disabled:cursor-not-allowed disabled:opacity-50\",\n        iconStyle,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <CheckboxIcon\n        className={cn(iconStyle, className)}\n        variant={\n          checked === \"indeterminate\"\n            ? \"minus-line\"\n            : checked\n              ? variant || \"line\"\n              : \"unchecked-line\"\n        }\n      />\n    </CheckboxPrimitive.Root>\n  );\n});\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox };\n"]}