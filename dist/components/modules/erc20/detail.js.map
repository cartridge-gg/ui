{"version":3,"file":"detail.js","sourceRoot":"","sources":["../../../../src/components/modules/erc20/detail.tsx"],"names":[],"mappings":";AAAA,OAAO,EACL,IAAI,EACJ,WAAW,EACX,UAAU,EACV,SAAS,EACT,YAAY,GACb,MAAM,SAAS,CAAC;AACjB,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AAmBtD,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,EAC1B,KAAK,EACL,aAAa,GAAG,KAAK,EACrB,OAAO,GACU,EAAE,EAAE;IACrB,OAAO,CACL,MAAC,IAAI,eACH,KAAC,UAAU,cACT,KAAC,SAAS,IAAC,SAAS,EAAC,uBAAuB,wBAAoB,GACrD,EACb,MAAC,WAAW,IAAC,SAAS,EAAC,mCAAmC,aACxD,YAAG,SAAS,EAAC,yCAAyC,iCAElD,EACH,aAAa,IAAI,OAAO,CAAC,CAAC,CAAC,CAC1B,aACE,IAAI,EAAE,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAClE,SAAS,EAAC,iCAAiC,EAC3C,MAAM,EAAC,QAAQ,aAEf,YAAG,SAAS,EAAC,aAAa,YACvB,aAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE;oCACrC,IAAI,EAAE,IAAI;oCACV,KAAK,EAAE,CAAC;oCACR,IAAI,EAAE,CAAC;iCACR,CAAC,GACA,EACJ,KAAC,YAAY,IAAC,IAAI,EAAC,IAAI,GAAG,IACxB,CACL,CAAC,CAAC,CAAC,CACF,sBAAI,aAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,GAAK,CACtE,IACW,EAEd,MAAC,WAAW,IAAC,SAAS,EAAC,mCAAmC,aACxD,YAAG,SAAS,EAAC,yCAAyC,+BAElD,EACJ,YAAG,SAAS,EAAC,yCAAyC,uBAAW,IACrD,IACT,CACR,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  ExternalIcon,\n} from \"@/index\";\nimport { formatAddress, StarkscanUrl } from \"@/utils\";\nimport { constants } from \"starknet\";\nimport { ERC20Token } from \"./types\";\n\ninterface PublicChainProps {\n  isPublicChain: true;\n  chainId: constants.StarknetChainId; // Required when isPublicChain is true\n}\n\ninterface PrivateChainProps {\n  isPublicChain?: false;\n  chainId?: constants.StarknetChainId; // Optional when isPublicChain is false\n}\n\n// Union type for props\nexport type ERC20DetailProps = {\n  token: ERC20Token;\n} & (PublicChainProps | PrivateChainProps);\n\nexport const ERC20Detail = ({\n  token,\n  isPublicChain = false,\n  chainId,\n}: ERC20DetailProps) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"font-semibold text-xs\">Details</CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex items-center justify-between\">\n        <p className=\"text-foreground-300 font-normal text-sm\">\n          Contract Address\n        </p>\n        {isPublicChain && chainId ? (\n          <a\n            href={`${StarkscanUrl(chainId).contract(token.metadata.address)} `}\n            className=\"flex items-center gap-1 text-sm\"\n            target=\"_blank\"\n          >\n            <p className=\"font-medium\">\n              {formatAddress(token.metadata.address, {\n                size: \"sm\",\n                first: 4,\n                last: 4,\n              })}\n            </p>\n            <ExternalIcon size=\"sm\" />\n          </a>\n        ) : (\n          <p>{formatAddress(token.metadata.address, { first: 4, last: 4 })}</p>\n        )}\n      </CardContent>\n\n      <CardContent className=\"flex items-center justify-between\">\n        <p className=\"text-foreground-300 font-normal text-sm\">\n          Token Standard\n        </p>\n        <p className=\"font-medium text-sm text-foreground-100\">ERC-20</p>\n      </CardContent>\n    </Card>\n  );\n};\n"]}