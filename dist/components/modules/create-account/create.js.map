{"version":3,"file":"create.js","sourceRoot":"","sources":["../../../../src/components/modules/create-account/create.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  AchievementPlayerAvatar,\n  AchievementPlayerBadge,\n  Input,\n  PlusIcon,\n  SeedlingIcon,\n  SparklesIcon,\n  TimesIcon,\n} from \"@/index\";\nimport { cn } from \"@/utils\";\nimport { AccountSearchResult } from \"@/utils/hooks/useAccountSearch\";\nimport * as React from \"react\";\nimport { AccountSearchDropdown } from \"./account-search-dropdown\";\nimport { Status, ValidationState } from \"./status\";\n\ntype CreateAccountProps = {\n  usernameField: {\n    value: string;\n    error?: Error;\n  };\n  validation: ValidationState;\n  error?: Error;\n  isLoading: boolean;\n  autoFocus?: boolean;\n  showAutocomplete?: boolean;\n  selectedAccount?: AccountSearchResult; // For pill functionality with account data\n  onUsernameChange: (value: string) => void;\n  onUsernameFocus: () => void;\n  onUsernameClear: () => void;\n  onKeyDown: (e: React.KeyboardEvent) => void;\n  onAccountSelect?: (result: AccountSearchResult) => void;\n  onSelectedUsernameRemove?: () => void; // For removing pill\n  // Mock data props for Storybook\n  mockResults?: AccountSearchResult[];\n  mockIsLoading?: boolean;\n  mockError?: Error;\n};\n\nexport const CreateAccount = React.forwardRef<\n  HTMLInputElement,\n  React.HTMLAttributes<HTMLDivElement> & CreateAccountProps\n>(\n  (\n    {\n      usernameField,\n      validation,\n      error,\n      isLoading,\n      autoFocus = false,\n      showAutocomplete = false,\n      selectedAccount,\n      onUsernameChange,\n      onUsernameFocus,\n      onUsernameClear,\n      onKeyDown,\n      onAccountSelect,\n      onSelectedUsernameRemove,\n      mockResults,\n      mockIsLoading,\n      mockError,\n      className,\n    },\n    ref,\n  ) => {\n    const hasMockResults = React.useMemo(\n      () => Boolean(mockResults && mockResults.length > 0),\n      [mockResults],\n    );\n\n    const internalRef = React.useRef<HTMLInputElement>(null);\n    const [isDropdownOpen, setIsDropdownOpen] = React.useState(() => {\n      if (usernameField.value === \"\") {\n        return false;\n      }\n\n      // Initialize dropdown as open if we have autocomplete enabled, a value, and mock results\n      return Boolean(\n        showAutocomplete && usernameField.value.length > 0 && hasMockResults,\n      );\n    });\n    const [selectedIndex, setSelectedIndex] = React.useState<\n      number | undefined\n    >(undefined);\n\n    // Use imperative handle to expose the input ref\n    React.useImperativeHandle(ref, () => internalRef.current!);\n\n    // Handle auto-focus internally\n    React.useEffect(() => {\n      if (autoFocus && internalRef.current) {\n        internalRef.current.focus();\n      }\n    }, [autoFocus]);\n\n    const handleFocus = React.useCallback(() => {\n      onUsernameFocus();\n      if (showAutocomplete) {\n        const shouldOpen = usernameField.value.length > 0 || hasMockResults;\n        setIsDropdownOpen(shouldOpen);\n      }\n    }, [\n      onUsernameFocus,\n      showAutocomplete,\n      usernameField.value,\n      hasMockResults,\n    ]);\n\n    const handleBlur = React.useCallback((e: React.FocusEvent) => {\n      // Only close if focus is not moving to the dropdown\n      const relatedTarget = e.relatedTarget as HTMLElement;\n      if (\n        relatedTarget &&\n        relatedTarget.closest(\"[data-radix-popover-content]\")\n      ) {\n        return;\n      }\n\n      // Small delay to allow for dropdown item clicks before closing\n      setTimeout(() => {\n        setIsDropdownOpen(false);\n        setSelectedIndex(undefined);\n      }, 150);\n    }, []);\n\n    const handleAccountSelect = React.useCallback(\n      (result: AccountSearchResult) => {\n        onUsernameChange(result.username);\n        setIsDropdownOpen(false);\n        setSelectedIndex(undefined);\n        onAccountSelect?.(result);\n      },\n      [onUsernameChange, onAccountSelect],\n    );\n\n    const handleKeyDown = React.useCallback(\n      (e: React.KeyboardEvent) => {\n        // Handle escape key to close dropdown\n        if (showAutocomplete && isDropdownOpen && e.key === \"Escape\") {\n          e.preventDefault();\n          setIsDropdownOpen(false);\n          setSelectedIndex(undefined);\n          return;\n        }\n\n        // If autocomplete is shown and dropdown is open, let dropdown handle arrow keys and enter\n        if (\n          showAutocomplete &&\n          isDropdownOpen &&\n          (e.key === \"ArrowDown\" || e.key === \"ArrowUp\" || e.key === \"Enter\")\n        ) {\n          // Dropdown will handle these keys\n          return;\n        }\n\n        // Otherwise, pass to parent handler\n        onKeyDown(e);\n      },\n      [onKeyDown, showAutocomplete, isDropdownOpen],\n    );\n\n    const handleInputChange = React.useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value.toLowerCase();\n        onUsernameChange(value);\n\n        if (showAutocomplete) {\n          // Batch state updates\n          React.startTransition(() => {\n            const shouldOpen = Boolean(\n              mockResults && mockResults.length > 0\n                ? value.length > 0\n                : value.length > 0,\n            );\n            setIsDropdownOpen(shouldOpen);\n            setSelectedIndex(undefined);\n          });\n        }\n      },\n      [onUsernameChange, showAutocomplete, mockResults],\n    );\n\n    // Render pill mode when selectedAccount is provided - simple pill design\n    const renderPillInput = () => (\n      <div\n        className={cn(\"flex flex-col rounded-md bg-background-150\", className)}\n      >\n        <div className=\"h-12 flex items-center justify-between gap-1 p-2 bg-background-200 rounded shadow-[0_4px_4px_0_rgba(0,0,0,0.25)] z-10\">\n          <AchievementPlayerBadge\n            icon={\n              selectedAccount?.type === \"create-new\" ? (\n                <PlusIcon variant=\"line\" className=\"text-foreground-100\" />\n              ) : (\n                <AchievementPlayerAvatar\n                  username={selectedAccount?.username || \"\"}\n                  className=\"!h-5 !w-5\"\n                />\n              )\n            }\n            rank={selectedAccount?.type === \"create-new\" ? \"empty\" : undefined}\n            variant=\"ghost\"\n            size=\"lg\"\n            className=\"!w-8 !h-8\"\n            badgeClassName={cn(\n              selectedAccount?.type === \"create-new\" && \"text-foreground-400\",\n            )}\n          />\n          <div className=\"flex flex-row items-center justify-between gap-1 flex-1\">\n            <p className=\"text-sm font-normal px-0.5 truncate\">\n              {selectedAccount?.username || \"N/A\"}\n            </p>\n\n            <div className=\"flex items-center gap-3\">\n              {selectedAccount?.type === \"create-new\" ? (\n                <div className=\"p-1 bg-background-300 rounded inline-flex justify-center items-center gap-0.5\">\n                  <div className=\"flex justify-start items-center gap-0.5\">\n                    <SeedlingIcon\n                      variant=\"solid\"\n                      className=\"text-primary\"\n                      size=\"xs\"\n                    />\n                  </div>\n                  <div className=\"px-0.5 flex justify-center items-center gap-2.5\">\n                    <p className=\"text-center justify-center text-primary text-xs font-normal leading-none\">\n                      Create New\n                    </p>\n                  </div>\n                </div>\n              ) : selectedAccount?.points ? (\n                <div className=\"flex items-center justify-center gap-0.5 p-1 bg-background-300 rounded text-foreground-100\">\n                  <SparklesIcon\n                    variant=\"solid\"\n                    size=\"xs\"\n                    className=\"text-foreground-100\"\n                  />\n                  <div className=\"flex items-center gap-1\">\n                    <p className=\"text-xs font-medium text-foreground-100\">\n                      {selectedAccount.points.toLocaleString()}\n                    </p>\n                  </div>\n                </div>\n              ) : null}\n              <TimesIcon\n                size=\"sm\"\n                className=\"text-foreground-400 hover:text-foreground-300 cursor-pointer\"\n                onClick={() => {\n                  onSelectedUsernameRemove?.();\n                  if (showAutocomplete) {\n                    setIsDropdownOpen(false);\n                    setSelectedIndex(undefined);\n                  }\n                }}\n              />\n            </div>\n          </div>\n        </div>\n        <Status\n          className=\"bg-background-150 rounded-b-md\"\n          username={selectedAccount?.username || \"\"}\n          validation={validation}\n          error={error}\n        />\n      </div>\n    );\n\n    const inputElement = selectedAccount ? (\n      renderPillInput()\n    ) : (\n      <>\n        <div\n          className={cn(\n            \"flex flex-col border rounded-md border-background-300 bg-background-300\",\n            (validation.status === \"invalid\" || error) &&\n              \"bg-destructive-100 border-destructive-100\",\n            className,\n          )}\n        >\n          <Input\n            ref={internalRef}\n            variant=\"username\"\n            size=\"lg\"\n            value={usernameField.value}\n            spellCheck={false}\n            placeholder=\"Username\"\n            className=\"relative z-1 focus:bg-spacer\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            data-1p-ignore=\"true\"\n            data-lpignore=\"true\"\n            data-form-type=\"other\"\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            isLoading={validation.status === \"validating\"}\n            disabled={isLoading}\n            onClear={() => {\n              onUsernameClear();\n              if (showAutocomplete) {\n                setIsDropdownOpen(false);\n                setSelectedIndex(undefined);\n              }\n            }}\n          />\n          {(!isDropdownOpen || usernameField.value === \"\") && (\n            <Status\n              username={usernameField.value}\n              validation={validation}\n              error={error}\n            />\n          )}\n        </div>\n        {isDropdownOpen && usernameField.value !== \"\" && (\n          <div className=\"h-8 bg-background-150 border-none\" /> // Placeholder to prevent layout shift when dropdown opens\n        )}\n      </>\n    );\n\n    const dropdownProps = React.useMemo(\n      () => ({\n        query: usernameField.value,\n        isOpen: isDropdownOpen,\n        onOpenChange: (open: boolean) => {\n          // Only allow closing via blur or explicit close, not via Popover's auto-close\n          if (!open) {\n            return;\n          }\n          setIsDropdownOpen(open);\n        },\n        onSelect: handleAccountSelect,\n        selectedIndex,\n        onSelectedIndexChange: setSelectedIndex,\n        mockResults,\n        mockIsLoading: mockIsLoading ?? false,\n        mockError,\n      }),\n      [\n        usernameField.value,\n        isDropdownOpen,\n        handleAccountSelect,\n        selectedIndex,\n        mockResults,\n        mockIsLoading,\n        mockError,\n      ],\n    );\n\n    if (showAutocomplete) {\n      return (\n        <AccountSearchDropdown {...dropdownProps}>\n          {inputElement}\n        </AccountSearchDropdown>\n      );\n    }\n\n    return inputElement;\n  },\n);\n\nCreateAccount.displayName = \"CreateAccount\";\n\nexport default CreateAccount;\n"]}