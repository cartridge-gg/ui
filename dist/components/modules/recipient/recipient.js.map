{"version":3,"file":"recipient.js","sourceRoot":"","sources":["../../../../src/components/modules/recipient/recipient.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAc,MAAM,cAAc,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AAwBxC,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,EACxB,EAAE,EACF,KAAK,EACL,YAAY,EACZ,eAAe,EACf,cAAc,EACd,QAAQ,EACR,OAAO,EACP,MAAM,EACN,OAAO,EACP,UAAU,EACV,aAAa,EACb,YAAY,EACZ,aAAa,EACb,aAAa,EACb,aAAa,EACb,KAAK,EACL,SAAS,EACT,SAAS,EACT,SAAS,GACM,EAAE,EAAE;IACnB,OAAO,CACL,eAAK,SAAS,EAAC,wBAAwB,aACrC,eAAK,SAAS,EAAC,mCAAmC,aAChD,KAAC,MAAM,IAAC,KAAK,EAAC,IAAI,GAAG,EACpB,CAAC,YAAY,IAAI,eAAe,CAAC,IAAI,CACpC,KAAC,SAAS,IACR,KAAK,EACH,YAAY,IAAI,aAAa,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAEhE,MAAM,EAAE,cAAc,GACtB,CACH,IACG,EACN,eAAK,SAAS,EAAC,gCAAgC,aAC7C,KAAC,QAAQ,IACP,UAAU,EAAE,KAAK,EACjB,WAAW,EAAE,+BAA+B,EAC5C,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,SAAS,EACpB,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,eAAe,GAC1B,EAED,CAAC,SAAS,IAAI,SAAS,CAAC;wBACvB,CAAC,KAAK;wBACN,aAAa;wBACb,CAAC,SAAS;wBACV,EAAE,KAAK,aAAa,IAAI,CACtB,cAAK,SAAS,EAAC,qDAAqD,YAClE,KAAC,OAAO,IACN,OAAO,EAAE,aAAa,EACtB,MAAM,EAAE,YAAY,EACpB,OAAO,EAAE,aAAa,EACtB,YAAY,EAAE,aAAa,EAC3B,YAAY,EAAE,aAAa,EAC3B,IAAI,EAAE,UAAU,GAChB,GACE,CACP,IACC,IACF,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Header, Textarea, WalletType } from \"@/components\";\nimport { Selection } from \"./selection\";\nimport { Preview } from \"./preview\";\nimport { formatAddress } from \"@/utils\";\n\ntype RecipientProps = {\n  to: string;\n  value: string;\n  selectedName: string;\n  selectedAddress: string;\n  selectedWallet: WalletType;\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onFocus: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onBlur: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onClear: () => void;\n  resultName: string | undefined;\n  resultAddress: string;\n  resultWallet: WalletType;\n  onResultClick: () => void;\n  onResultEnter: () => void;\n  onResultLeave: () => void;\n  isLoading: boolean;\n  isFocused: boolean;\n  isHovered: boolean;\n  error?: Error;\n};\n\nexport const Recipient = ({\n  to,\n  value,\n  selectedName,\n  selectedAddress,\n  selectedWallet,\n  onChange,\n  onFocus,\n  onBlur,\n  onClear,\n  resultName,\n  resultAddress,\n  resultWallet,\n  onResultClick,\n  onResultEnter,\n  onResultLeave,\n  error,\n  isLoading,\n  isFocused,\n  isHovered,\n}: RecipientProps) => {\n  return (\n    <div className=\"flex flex-col gap-y-px\">\n      <div className=\"flex items-center justify-between\">\n        <Header label=\"To\" />\n        {(selectedName || selectedAddress) && (\n          <Selection\n            label={\n              selectedName || formatAddress(selectedAddress, { size: \"xs\" })\n            }\n            wallet={selectedWallet}\n          />\n        )}\n      </div>\n      <div className=\"relative flex flex-col gap-y-3\">\n        <Textarea\n          spellCheck={false}\n          placeholder={\"Recipient Address or Username\"}\n          value={value}\n          error={error}\n          onChange={onChange}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          isLoading={isLoading}\n          onClear={onClear}\n          className={\"min-w-[320px]\"}\n        />\n\n        {(isFocused || isHovered) &&\n          !error &&\n          resultAddress &&\n          !isLoading &&\n          to !== resultAddress && (\n            <div className=\"absolute bottom-[-8px] translate-y-full w-full z-10\">\n              <Preview\n                address={resultAddress}\n                wallet={resultWallet}\n                onClick={onResultClick}\n                onMouseEnter={onResultEnter}\n                onMouseLeave={onResultLeave}\n                name={resultName}\n              />\n            </div>\n          )}\n      </div>\n    </div>\n  );\n};\n"]}