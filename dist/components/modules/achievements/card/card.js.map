{"version":3,"file":"card.js","sourceRoot":"","sources":["../../../../../src/components/modules/achievements/card/card.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  AchievementBit,\n  AchievementBits,\n  AchievementContent,\n  AchievementContentProps,\n  AchievementPagination,\n  AchievementPin,\n  AchievementPinProps,\n  AchievementShare,\n  AchievementShareProps,\n  Card,\n  CardHeader,\n  CardTitle,\n} from \"@/index\";\nimport { cn } from \"@/utils\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nexport interface AchievementCardProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  name: string;\n  achievements: {\n    id: string;\n    index: number;\n    completed: boolean;\n    content: AchievementContentProps;\n    pin?: AchievementPinProps;\n    share?: AchievementShareProps;\n  }[];\n}\n\nexport const AchievementCard = ({\n  name,\n  achievements,\n}: AchievementCardProps) => {\n  const [page, setPage] = useState(0);\n  const [pages, setPages] = useState<number[]>([]);\n\n  const visibles = useMemo(() => {\n    return achievements.filter(\n      (a) => a.index === page || (a.content.hidden && !a.completed),\n    );\n  }, [achievements, page]);\n\n  const handleNext = useCallback(() => {\n    const index = pages.indexOf(page);\n    const next = pages[index + 1];\n    if (!next) return;\n    setPage(next);\n  }, [page, pages]);\n\n  const handlePrevious = useCallback(() => {\n    const index = pages.indexOf(page);\n    if (index === 0) return;\n    setPage(pages[index - 1]);\n  }, [page, pages]);\n\n  useEffect(() => {\n    // Set the page to the first uncompleted achievement or 0 if there are none\n    const filtereds = achievements.filter(\n      (a) => !a.content.hidden || a.completed,\n    );\n    // Get the unique list of indexes for the achievements in this group\n    const pages =\n      filtereds.length > 0 ? [...new Set(filtereds.map((a) => a.index))] : [0];\n    setPages(pages);\n    const page = filtereds.find((a) => !a.completed);\n    setPage(page ? page.index : pages[pages.length - 1]);\n  }, [achievements]);\n\n  if (visibles.length === 0) return null;\n\n  return (\n    <Card>\n      <div className=\"flex flex-row gap-x-px\">\n        <CardHeader className=\"grow\">\n          <CardTitle className=\"capitalize\">{name.toLowerCase()}</CardTitle>\n        </CardHeader>\n        {pages.length > 1 && (\n          <AchievementPagination\n            direction=\"left\"\n            onClick={handlePrevious}\n            disabled={page === pages[0]}\n          />\n        )}\n        {pages.length > 1 && (\n          <AchievementPagination\n            direction=\"right\"\n            onClick={handleNext}\n            disabled={page === pages[pages.length - 1]}\n          />\n        )}\n        {pages.length > 1 && (\n          <CardHeader>\n            <AchievementBits>\n              {pages.map((p) => (\n                <AchievementBit\n                  key={p}\n                  completed={achievements\n                    .filter((a) => a.index === p)\n                    .every((a) => a.completed)}\n                  active={p === page}\n                  onClick={() => setPage(p)}\n                />\n              ))}\n            </AchievementBits>\n          </CardHeader>\n        )}\n      </div>\n      {visibles.map((achievement) => (\n        <div key={achievement.id} className=\"flex gap-x-px\">\n          <AchievementContent {...achievement.content} />\n          <div\n            className={cn(\n              \"flex flex-col gap-y-px\",\n              !achievement.pin && !achievement.share && \"hidden\",\n            )}\n          >\n            {achievement.pin && <AchievementPin {...achievement.pin} />}\n            {achievement.share && <AchievementShare {...achievement.share} />}\n          </div>\n        </div>\n      ))}\n    </Card>\n  );\n};\n\nexport default AchievementCard;\n"]}