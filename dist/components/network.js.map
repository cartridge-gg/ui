{"version":3,"file":"network.js","sourceRoot":"","sources":["../../src/components/network.tsx"],"names":[],"mappings":";AAAA,OAAO,EACL,MAAM,EAEN,QAAQ,EACR,OAAO,EACP,cAAc,EACd,eAAe,EACf,cAAc,GACf,MAAM,cAAc,CAAC;AACtB,OAAO,EAAE,WAAW,EAAO,MAAM,MAAM,CAAC;AACxC,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACpE,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AACrC,OAAO,EAAE,EAAE,EAAE,YAAY,EAAE,WAAW,EAAE,MAAM,SAAS,CAAC;AACxD,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AAE/B,MAAM,UAAU,OAAO,CAAC,EACtB,OAAO,EACP,OAAO,GAAG,WAAW,EACrB,uBAAuB,EACvB,uBAAuB,EACvB,aAAa,GAOd;IACC,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,EAAE;QAC9B,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACvC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACnC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,KAAC,QAAQ,IAAC,SAAS,EAAC,4BAA4B,GAAG,CAAC;IAC7D,CAAC;IAED,OAAO,CACL,KAAC,eAAe,cACd,MAAC,OAAO,eACN,KAAC,cAAc,IAAC,OAAO,kBACrB,MAAC,MAAM,IACL,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,EAAE,CACX,8EAA8E,EAC9E,uBAAuB,CACxB,EACD,OAAO,EAAE,MAAM,aAEd,CAAC,GAAG,EAAE;gCACL,QAAQ,OAAO,EAAE,CAAC;oCAChB,KAAK,SAAS,CAAC,eAAe,CAAC,OAAO;wCACpC,OAAO,KAAC,iBAAiB,IAAC,SAAS,EAAE,aAAa,GAAI,CAAC;oCACzD,KAAK,SAAS,CAAC,eAAe,CAAC,UAAU;wCACvC,OAAO,KAAC,YAAY,IAAC,SAAS,EAAE,aAAa,GAAI,CAAC;oCACpD;wCACE,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAC,QAAQ,KAAG,CAAC,CAAC,CAAC,KAAC,YAAY,KAAG,CAAC;gCAClE,CAAC;4BACH,CAAC,CAAC,EAAE,EACJ,wBAAM,YAAY,CAAC,OAAO,CAAC,GAAO,IAC3B,GACM,EACjB,KAAC,cAAc,cACb,cAAK,SAAS,EAAE,uBAAuB,YACpC,WAAW,CAAC,OAAc,CAAC,GACxB,GACS,IACT,GACM,CACnB,CAAC;AACJ,CAAC","sourcesContent":["import {\n  Button,\n  ButtonProps,\n  Skeleton,\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"./primitives\";\nimport { hexToString, Hex } from \"viem\";\nimport { SlotIcon, StarknetColorIcon, StarknetIcon } from \"./icons\";\nimport { QuestionIcon } from \"./icons/utility/question\";\nimport { constants } from \"starknet\";\nimport { cn, getChainName, isSlotChain } from \"@/utils\";\nimport { useCallback } from \"react\";\nimport { toast } from \"sonner\";\n\nexport function Network({\n  chainId,\n  variant = \"secondary\",\n  tooltipTriggerClassName,\n  tooltipContentClassName,\n  iconClassName,\n}: {\n  chainId: string;\n  variant?: ButtonProps[\"variant\"];\n  tooltipTriggerClassName?: string;\n  tooltipContentClassName?: string;\n  iconClassName?: string;\n}) {\n  const onCopy = useCallback(() => {\n    navigator.clipboard.writeText(chainId);\n    toast.success(\"Chain ID copied\");\n  }, [chainId]);\n\n  if (!chainId) {\n    return <Skeleton className=\"h-[40px] w-[120px] rounded\" />;\n  }\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            variant={variant}\n            className={cn(\n              \"flex items-center gap-2 font-inter bg-background hover:bg-background text-xs\",\n              tooltipTriggerClassName,\n            )}\n            onClick={onCopy}\n          >\n            {(() => {\n              switch (chainId) {\n                case constants.StarknetChainId.SN_MAIN:\n                  return <StarknetColorIcon className={iconClassName} />;\n                case constants.StarknetChainId.SN_SEPOLIA:\n                  return <StarknetIcon className={iconClassName} />;\n                default:\n                  return isSlotChain(chainId) ? <SlotIcon /> : <QuestionIcon />;\n              }\n            })()}\n            <div>{getChainName(chainId)}</div>\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <div className={tooltipContentClassName}>\n            {hexToString(chainId as Hex)}\n          </div>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n"]}