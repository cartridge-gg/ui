{"version":3,"file":"number.js","sourceRoot":"","sources":["../../src/utils/number.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,GAA6B,EAAU,EAAE;IACpE,wCAAwC;IACxC,IAAI,YAAoB,CAAC;IACzB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QAC5B,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;SAAM,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QACnC,YAAY,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;SAAM,CAAC;QACN,YAAY,GAAG,GAAG,CAAC;IACrB,CAAC;IAED,IAAI,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC;QACxB,OAAO,GAAG,CAAC;IACb,CAAC;IAED,0DAA0D;IAC1D,OAAO,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AACzD,CAAC,CAAC","sourcesContent":["export const formatNumber = (num: number | string | bigint): string => {\n  // Handle BigInt by converting to number\n  let numericValue: number;\n  if (typeof num === \"bigint\") {\n    numericValue = Number(num);\n  } else if (typeof num === \"string\") {\n    numericValue = parseFloat(num);\n  } else {\n    numericValue = num;\n  }\n\n  if (isNaN(numericValue)) {\n    return \"0\";\n  }\n\n  // Use the browser's locale for regional number formatting\n  return numericValue.toLocaleString(navigator.language);\n};\n"]}