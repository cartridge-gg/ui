{"version":3,"file":"erc20.js","sourceRoot":"","sources":["../../src/utils/erc20.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,SAAS,EACT,kBAAkB,EAClB,GAAG,EAEH,WAAW,EACX,OAAO,GACR,MAAM,UAAU,CAAC;AAWlB,MAAM,CAAC,MAAM,oBAAoB,GAAG,kBAAkB,CACpD,oEAAoE,CACrE,CAAC;AACF,MAAM,CAAC,MAAM,qBAAqB,GAAG,kBAAkB,CACrD,oEAAoE,CACrE,CAAC;AACF,MAAM,CAAC,MAAM,qBAAqB,GAAG,kBAAkB,CACrD,oEAAoE,CACrE,CAAC;AACF,MAAM,CAAC,MAAM,qBAAqB,GAAG,kBAAkB,CACrD,oEAAoE,CACrE,CAAC;AACF,MAAM,CAAC,MAAM,oBAAoB,GAAG,kBAAkB,CACpD,oEAAoE,CACrE,CAAC;AACF,MAAM,CAAC,MAAM,sBAAsB,GAAG,kBAAkB,CACtD,oEAAoE,CACrE,CAAC;AACF,MAAM,CAAC,MAAM,sBAAsB,GAAG,kBAAkB,CACtD,oEAAoE,CACrE,CAAC;AAEF,MAAM,OAAO,KAAK;IACR,OAAO,CAAS;IAChB,OAAO,CAAU;IACjB,QAAQ,CAAW;IAEnB,IAAI,CAAU;IACd,MAAM,CAAU;IAChB,QAAQ,CAAU;IAE1B,wCAAwC;IACxC,8BAA8B;IAE9B,YAAY,EACV,OAAO,EACP,QAAQ,EACR,OAAO,GAKR;QACC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACjD,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,YAAY,EAAE;SACpB,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACjD,MAAM,IAAI,KAAK,CACb,+DAA+D,CAChE,CAAC;QACJ,CAAC;QAED,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,QAAQ,EAAE,IAAI;SACf,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,OAAe;QAC7B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;YAC/C,eAAe,EAAE,IAAI,CAAC,OAAO;YAC7B,UAAU,EAAE,WAAW;YACvB,QAAQ,EAAE,CAAC,OAAO,CAAC;SACpB,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC;YACrC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;YACf,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;SACjB,CAAC,CAAC;QAEH,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,QAAQ;QACpB,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;gBAC9C,eAAe,EAAE,IAAI,CAAC,OAAO;gBAC7B,UAAU,EAAE,MAAM;aACnB,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,mCAAmC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,UAAU;QACtB,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;gBAC9C,eAAe,EAAE,IAAI,CAAC,OAAO;gBAC7B,UAAU,EAAE,QAAQ;aACrB,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,qCAAqC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,YAAY;QACxB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;gBAChD,eAAe,EAAE,IAAI,CAAC,OAAO;gBAC7B,UAAU,EAAE,UAAU;aACvB,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,uCAAuC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;IAEO,WAAW,CAAC,MAAgB;QAClC,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;YACvB,OAAO,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC;QAED,MAAM,MAAM,GAAc;YACxB,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACnD,YAAY,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YACvC,gBAAgB,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;SAC5C,CAAC;QACF,OAAO,SAAS,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC;CACF","sourcesContent":["import {\n  ByteArray,\n  byteArray,\n  getChecksumAddress,\n  num,\n  Provider,\n  shortString,\n  uint256,\n} from \"starknet\";\n\nexport type ERC20Metadata = {\n  name: string;\n  logoUrl?: string;\n  symbol: string;\n  decimals: number;\n  address: string;\n  instance: ERC20;\n};\n\nexport const ETH_CONTRACT_ADDRESS = getChecksumAddress(\n  \"0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\n);\nexport const STRK_CONTRACT_ADDRESS = getChecksumAddress(\n  \"0x04718f5a0Fc34cC1AF16A1cdee98fFB20C31f5cD61D6Ab07201858f4287c938D\",\n);\nexport const USDC_CONTRACT_ADDRESS = getChecksumAddress(\n  \"0x053c91253bc9682c04929ca02ed00b3e423f6710d2ee7e0d5ebb06f3ecf368a8\",\n);\nexport const USDT_CONTRACT_ADDRESS = getChecksumAddress(\n  \"0x068f5c6a61780768455de69077e07e89787839bf8166decfbf92b645209c0fb8\",\n);\nexport const DAI_CONTRACT_ADDRESS = getChecksumAddress(\n  \"0x00da114221cb83fa859dbdb4c44beeaa0bb37c7537ad5ae66fe5e0efd20e6eb3\",\n);\nexport const EKUBO_CONTRACT_ADDRESS = getChecksumAddress(\n  \"0x075afe6402ad5a5c20dd25e10ec3b3986acaa647b77e4ae24b0cbc9a54a27a87\",\n);\nexport const LORDS_CONTRACT_ADDRESS = getChecksumAddress(\n  \"0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49\",\n);\n\nexport class ERC20 {\n  private address: string;\n  private logoUrl?: string;\n  private provider: Provider;\n\n  private name?: string;\n  private symbol?: string;\n  private decimals?: number;\n\n  // TODO: Utilize Contract class with ABI\n  // private contract: Contract;\n\n  constructor({\n    address,\n    provider,\n    logoUrl,\n  }: {\n    address: string;\n    logoUrl?: string;\n    provider: Provider;\n  }) {\n    this.address = address;\n    this.logoUrl = logoUrl;\n    this.provider = provider;\n  }\n\n  async init() {\n    const [name, symbol, decimals] = await Promise.all([\n      this.callName(),\n      this.callSymbol(),\n      this.callDecimals(),\n    ]);\n\n    this.name = name;\n    this.symbol = symbol;\n    this.decimals = decimals;\n\n    return this;\n  }\n\n  metadata(): ERC20Metadata {\n    if (!this.name || !this.symbol || !this.decimals) {\n      throw new Error(\n        \"Token metadata is missing. Make sure to call `.init()` method\",\n      );\n    }\n\n    return {\n      address: this.address,\n      name: this.name,\n      symbol: this.symbol,\n      decimals: this.decimals,\n      logoUrl: this.logoUrl,\n      instance: this,\n    };\n  }\n\n  async balanceOf(address: string): Promise<bigint> {\n    const balance = await this.provider.callContract({\n      contractAddress: this.address,\n      entrypoint: \"balanceOf\",\n      calldata: [address],\n    });\n\n    const rawBalance = uint256.uint256ToBN({\n      low: balance[0],\n      high: balance[1],\n    });\n\n    return rawBalance;\n  }\n\n  private async callName() {\n    try {\n      const result = await this.provider.callContract({\n        contractAddress: this.address,\n        entrypoint: \"name\",\n      });\n\n      return this.parseResult(result);\n    } catch {\n      throw new Error(`Failed to fetch name for token: ${this.address}`);\n    }\n  }\n\n  private async callSymbol() {\n    try {\n      const result = await this.provider.callContract({\n        contractAddress: this.address,\n        entrypoint: \"symbol\",\n      });\n\n      return this.parseResult(result);\n    } catch {\n      throw new Error(`Failed to fetch symbol for token: ${this.address}`);\n    }\n  }\n\n  private async callDecimals() {\n    try {\n      const decimals = await this.provider.callContract({\n        contractAddress: this.address,\n        entrypoint: \"decimals\",\n      });\n\n      return Number(num.toHex(decimals[0]));\n    } catch {\n      throw new Error(`Failed to fetch decimals for token: ${this.address}`);\n    }\n  }\n\n  private parseResult(result: string[]): string {\n    if (result.length == 1) {\n      return shortString.decodeShortString(result[0]);\n    }\n\n    const symbol: ByteArray = {\n      data: result[0] != \"0x0\" ? result.slice(1, -2) : [],\n      pending_word: result[result.length - 2],\n      pending_word_len: result[result.length - 1],\n    };\n    return byteArray.stringFromByteArray(symbol);\n  }\n}\n"]}