{"version":3,"file":"useAccountSearch.mock.js","sourceRoot":"","sources":["../../../src/utils/hooks/useAccountSearch.mock.ts"],"names":[],"mappings":"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","sourcesContent":["import { useMemo } from \"react\";\nimport type {\n  AccountSearchResult,\n  UseAccountSearchOptions,\n  UseAccountSearchResult,\n} from \"./useAccountSearch\";\n\n// Mock data for Storybook\nconst mockAccounts = [\n  {\n    username: \"shints\",\n    points: 20800,\n    lastOnline: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n  },\n  {\n    username: \"shinobi\",\n    points: 20800,\n    lastOnline: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n  },\n  {\n    username: \"shinex\",\n    points: 15200,\n    lastOnline: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago\n  },\n  {\n    username: \"shiny\",\n    points: 8900,\n    lastOnline: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n  },\n];\n\nexport function useAccountSearch(\n  query: string,\n  options: UseAccountSearchOptions = {},\n): UseAccountSearchResult {\n  const { minLength = 1, maxResults = 5 } = options;\n\n  const trimmedQuery = query.trim().toLowerCase();\n  const shouldSearch = trimmedQuery.length >= minLength;\n\n  const results = useMemo(() => {\n    if (!shouldSearch) return [];\n\n    const accountResults: AccountSearchResult[] = [];\n\n    // Filter mock accounts that match the query\n    const matchingAccounts = mockAccounts\n      .filter((account) =>\n        account.username.toLowerCase().startsWith(trimmedQuery),\n      )\n      .slice(0, maxResults);\n\n    // Add existing accounts from mock data\n    accountResults.push(\n      ...matchingAccounts.map((account) => ({\n        id: `existing-${account.username}`,\n        type: \"existing\" as const,\n        username: account.username,\n        points: account.points,\n        lastOnline: account.lastOnline,\n      })),\n    );\n\n    // Check if exact match exists\n    const exactMatch = accountResults.find(\n      (result) => result.username.toLowerCase() === trimmedQuery.toLowerCase(),\n    );\n\n    // If no exact match, add \"Create New\" option\n    if (!exactMatch && trimmedQuery.length >= 3) {\n      accountResults.unshift({\n        id: `create-new-${trimmedQuery}`,\n        type: \"create-new\",\n        username: trimmedQuery,\n      });\n    }\n\n    return accountResults;\n  }, [trimmedQuery, shouldSearch, maxResults]);\n\n  // Simulate loading state briefly\n  const isLoading = false;\n\n  return {\n    results,\n    isLoading,\n    error: undefined,\n  };\n}\n"]}