{"version":3,"file":"balance.js","sourceRoot":"","sources":["../../../src/utils/hooks/balance.ts"],"names":[],"mappings":"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","sourcesContent":["import { getChecksumAddress, Provider } from \"starknet\";\nimport useSWR from \"swr\";\nimport { ERC20, ERC20Metadata } from \"../erc20\";\nimport { CreditQuery, useCreditQuery } from \"../api/cartridge\";\nimport { erc20Metadata } from \"@cartridge/presets\";\n\nexport type Balance = {\n  value: bigint;\n  formatted: string;\n};\n\n/**\n * Calculate balance from raw amount and decimals\n * @param amount - Raw amount as string (to handle large numbers)\n * @param decimals - Number of decimal places\n * @returns Balance object with BigInt value and formatted string\n */\nexport function calculateBalance(amount: string, decimals: number): Balance {\n  const value = BigInt(amount);\n\n  // Handle null/undefined/invalid decimals\n  if (decimals == null || decimals < 0 || !Number.isInteger(decimals)) {\n    throw new Error(\"Decimals must be a non-negative integer\");\n  }\n\n  // Use BigInt arithmetic for factor calculation to avoid precision loss\n  const factor = 10n ** BigInt(decimals);\n\n  // Use BigInt arithmetic for precision, then convert to decimal string\n  const wholePart = value / factor;\n  const fractionalPart = value % factor;\n\n  // Convert to decimal string to avoid floating-point precision issues\n  let decimalStr = wholePart.toString();\n\n  // Handle fractional part (use absolute value for negative numbers)\n  const absFractionalPart =\n    fractionalPart < 0n ? -fractionalPart : fractionalPart;\n  if (absFractionalPart > 0n) {\n    // Pad fractional part with leading zeros to match decimal places\n    const fractionalStr = absFractionalPart.toString().padStart(decimals, \"0\");\n    // Remove trailing zeros for cleaner display\n    const trimmedFractional = fractionalStr.replace(/0+$/, \"\");\n    if (trimmedFractional) {\n      decimalStr += \".\" + trimmedFractional;\n    }\n  }\n\n  // Convert to number for rounding to 2 decimal places\n  const adjusted = parseFloat(decimalStr);\n  const rounded = Math.round(adjusted * 100) / 100;\n  const formatted = rounded.toString();\n\n  return {\n    value,\n    formatted,\n  };\n}\n\nexport type ERC20Balance = {\n  balance: Balance;\n  meta: ERC20Metadata;\n};\n\nexport type UseERC20BalanceResponse = {\n  data: ERC20Balance[];\n  isFetching: boolean;\n  isLoading: boolean;\n};\n\nexport function useERC20Balance({\n  address,\n  contractAddress,\n  provider,\n  interval,\n  decimals = 5,\n}: {\n  address?: string;\n  contractAddress: string | string[];\n  provider?: Provider;\n  interval: number | undefined;\n  decimals?: number;\n}) {\n  const { data: chainId } = useSWR(address && provider ? \"chainId\" : null, () =>\n    provider?.getChainId(),\n  );\n  const { data: meta } = useSWR(\n    chainId && erc20Metadata.length\n      ? `erc20:metadata:${chainId}:${address}:${contractAddress}`\n      : null,\n    async () => {\n      if (!provider || !address) return [];\n      const contractList = Array.isArray(contractAddress)\n        ? contractAddress\n        : [contractAddress];\n      const erc20List = await Promise.allSettled(\n        contractList.map((address) =>\n          new ERC20({\n            address,\n            provider,\n            logoUrl: erc20Metadata.find(\n              (m) =>\n                getChecksumAddress(m.l2_token_address) ===\n                getChecksumAddress(address),\n            )?.logo_url,\n          }).init(),\n        ),\n      );\n\n      return erc20List\n        .filter((res) => res.status === \"fulfilled\")\n        .map((erc20) => erc20.value.metadata());\n    },\n    { fallbackData: [] },\n  );\n\n  const { data, isValidating, isLoading, error } = useSWR(\n    meta.length && address\n      ? `erc20:balance:${chainId}:${address}:${contractAddress}`\n      : null,\n    async () => {\n      if (!address) return [];\n      const values = await Promise.allSettled(\n        meta.map((m) => m.instance.balanceOf(address)),\n      );\n\n      return meta.reduce<{ balance: Balance; meta: ERC20Metadata }[]>(\n        (prev, meta, i) => {\n          const res = values[i];\n          if (res.status === \"rejected\") return prev;\n\n          const value = res.value;\n          const factor = 10 ** meta.decimals;\n          const adjusted = parseFloat(value.toString()) / factor;\n          // Round and remove insignificant trailing zeros\n          const rounded = parseFloat(adjusted.toFixed(decimals));\n          const formatted =\n            adjusted === rounded ? adjusted.toString() : `~${rounded}`;\n\n          return [\n            ...prev,\n            {\n              balance: {\n                value,\n                formatted,\n              },\n              meta,\n            },\n          ];\n        },\n        [],\n      );\n    },\n    { refreshInterval: interval, fallbackData: [] },\n  );\n\n  return {\n    data,\n    isFetching: isValidating,\n    isLoading,\n    error,\n  };\n}\n\nexport type FetchState = {\n  isFetching: boolean;\n  isLoading: boolean;\n  error: Error | null;\n};\n\nexport type UseCreditBalanceReturn = {\n  balance: Balance;\n} & FetchState;\n\nexport function useCreditBalance({\n  username,\n  interval,\n}: {\n  username?: string;\n  interval: number | undefined;\n}): UseCreditBalanceReturn {\n  const { data, isFetching, isLoading, error } = useCreditQuery<\n    CreditQuery,\n    Error\n  >(\n    { username: username! },\n    {\n      refetchInterval: interval,\n      enabled: !!username,\n    },\n  );\n\n  let balance: Balance = {\n    value: 0n,\n    formatted: \"0\",\n  };\n\n  if (data?.account?.credits) {\n    const amount = data?.account?.credits?.amount!;\n    const decimals = data?.account?.credits?.decimals;\n\n    balance = calculateBalance(amount, decimals);\n  }\n\n  return {\n    balance,\n    isFetching,\n    isLoading,\n    error,\n  };\n}\n"]}