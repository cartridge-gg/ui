{"version":3,"file":"balance.test.js","sourceRoot":"","sources":["../../../src/utils/hooks/balance.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect } from \"vitest\";\nimport { calculateBalance } from \"./balance\";\n\ndescribe(\"Balance calculation logic\", () => {\n  describe(\"Basic functionality\", () => {\n    it(\"should handle whole numbers correctly\", () => {\n      const result = calculateBalance(\"1000000\", 6);\n      expect(result.formatted).toBe(\"1\");\n      expect(result.value).toBe(1000000n);\n    });\n\n    it(\"should handle fractional amounts correctly\", () => {\n      const result = calculateBalance(\"4966487025\", 6);\n      expect(result.formatted).toBe(\"4966.49\");\n      expect(result.value).toBe(4966487025n);\n    });\n\n    it(\"should handle zero correctly\", () => {\n      const result = calculateBalance(\"0\", 6);\n      expect(result.formatted).toBe(\"0\");\n      expect(result.value).toBe(0n);\n    });\n\n    it(\"should handle very small amounts correctly\", () => {\n      const result = calculateBalance(\"1\", 6);\n      expect(result.formatted).toBe(\"0\");\n      expect(result.value).toBe(1n);\n    });\n\n    it(\"should handle amounts just under 1 unit correctly\", () => {\n      const result = calculateBalance(\"999999\", 6);\n      expect(result.formatted).toBe(\"1\");\n      expect(result.value).toBe(999999n);\n    });\n\n    it(\"should handle amounts just over 1 unit correctly\", () => {\n      const result = calculateBalance(\"1000001\", 6);\n      expect(result.formatted).toBe(\"1\");\n      expect(result.value).toBe(1000001n);\n    });\n  });\n\n  describe(\"Different decimal places\", () => {\n    it(\"should handle 18 decimals (like ETH)\", () => {\n      const result = calculateBalance(\"1000000000000000000\", 18);\n      expect(result.formatted).toBe(\"1\");\n      expect(result.value).toBe(1000000000000000000n);\n    });\n\n    it(\"should handle 18 decimals with fractional part\", () => {\n      const result = calculateBalance(\"1500000000000000000\", 18);\n      expect(result.formatted).toBe(\"1.5\");\n      expect(result.value).toBe(1500000000000000000n);\n    });\n\n    it(\"should handle 2 decimals (like USD cents)\", () => {\n      const result = calculateBalance(\"150\", 2);\n      expect(result.formatted).toBe(\"1.5\");\n      expect(result.value).toBe(150n);\n    });\n\n    it(\"should handle 0 decimals\", () => {\n      const result = calculateBalance(\"42\", 0);\n      expect(result.formatted).toBe(\"42\");\n      expect(result.value).toBe(42n);\n    });\n  });\n\n  describe(\"Large numbers\", () => {\n    it(\"should handle very large amounts without precision loss\", () => {\n      const result = calculateBalance(\"999999999999999999999\", 18);\n      expect(result.formatted).toBe(\"1000\");\n      expect(result.value).toBe(999999999999999999999n);\n    });\n\n    it(\"should handle maximum safe BigInt values\", () => {\n      const largeAmount = \"123456789012345678901234567890\";\n      const result = calculateBalance(largeAmount, 18);\n      expect(result.value).toBe(BigInt(largeAmount));\n      expect(typeof result.formatted).toBe(\"string\");\n      expect(result.formatted).not.toBe(\"NaN\");\n    });\n\n    it(\"should handle large decimal places without precision loss\", () => {\n      // Test with 30 decimals - would overflow with old 10 ** decimals approach\n      const result = calculateBalance(\"1000000000000000000000000000000\", 30);\n      expect(result.formatted).toBe(\"1\");\n      expect(result.value).toBe(1000000000000000000000000000000n);\n    });\n\n    it(\"should handle very large decimal places (50)\", () => {\n      // 50 decimals would definitely overflow with regular number arithmetic\n      const amount = \"1\" + \"0\".repeat(50); // 1 followed by 50 zeros\n      const result = calculateBalance(amount, 50);\n      expect(result.formatted).toBe(\"1\");\n      expect(result.value).toBe(BigInt(amount));\n    });\n  });\n\n  describe(\"Rounding behavior\", () => {\n    it(\"should round to 2 decimal places\", () => {\n      const result = calculateBalance(\"1234567\", 6); // 1.234567\n      expect(result.formatted).toBe(\"1.23\");\n    });\n\n    it(\"should round up when needed\", () => {\n      const result = calculateBalance(\"1235000\", 6); // 1.235\n      expect(result.formatted).toBe(\"1.24\");\n    });\n\n    it(\"should handle exact 2 decimal places\", () => {\n      const result = calculateBalance(\"1230000\", 6); // 1.23\n      expect(result.formatted).toBe(\"1.23\");\n    });\n\n    it(\"should handle trailing zeros correctly\", () => {\n      const result = calculateBalance(\"1200000\", 6); // 1.2\n      expect(result.formatted).toBe(\"1.2\");\n    });\n  });\n\n  describe(\"Edge cases\", () => {\n    it(\"should handle negative amounts\", () => {\n      const result = calculateBalance(\"-1000000\", 6);\n      expect(result.formatted).toBe(\"-1\");\n      expect(result.value).toBe(-1000000n);\n    });\n\n    it(\"should handle negative amounts with fractional parts\", () => {\n      const result = calculateBalance(\"-4966487025\", 6);\n      expect(result.formatted).toBe(\"-4966.49\");\n      expect(result.value).toBe(-4966487025n);\n    });\n\n    it(\"should handle negative amounts with small fractional parts\", () => {\n      const result = calculateBalance(\"-1500000\", 6);\n      expect(result.formatted).toBe(\"-1.5\");\n      expect(result.value).toBe(-1500000n);\n    });\n\n    it(\"should handle very high decimal precision\", () => {\n      const result = calculateBalance(\"1000000000000000000000000000000\", 30);\n      expect(result.value).toBe(1000000000000000000000000000000n);\n      expect(typeof result.formatted).toBe(\"string\");\n      expect(result.formatted).not.toBe(\"NaN\");\n    });\n\n    it(\"should handle single digit amounts\", () => {\n      const result = calculateBalance(\"5\", 1);\n      expect(result.formatted).toBe(\"0.5\");\n      expect(result.value).toBe(5n);\n    });\n  });\n\n  describe(\"Error scenarios that would cause NaN in old logic\", () => {\n    it(\"should throw on invalid amount string\", () => {\n      expect(() => calculateBalance(\"invalid\", 6)).toThrow();\n    });\n\n    it(\"should throw on null amount\", () => {\n      expect(() => calculateBalance(null as any, 6)).toThrow();\n    });\n\n    it(\"should throw on undefined amount\", () => {\n      expect(() => calculateBalance(undefined as any, 6)).toThrow();\n    });\n\n    it(\"should throw on negative decimals\", () => {\n      expect(() => calculateBalance(\"1000000\", -1)).toThrow(\n        \"Decimals must be a non-negative integer\",\n      );\n    });\n\n    it(\"should throw on null decimals\", () => {\n      expect(() => calculateBalance(\"1000000\", null as any)).toThrow(\n        \"Decimals must be a non-negative integer\",\n      );\n    });\n\n    it(\"should throw on undefined decimals\", () => {\n      expect(() => calculateBalance(\"1000000\", undefined as any)).toThrow(\n        \"Decimals must be a non-negative integer\",\n      );\n    });\n\n    it(\"should throw on non-integer decimals\", () => {\n      expect(() => calculateBalance(\"1000000\", 6.5)).toThrow(\n        \"Decimals must be a non-negative integer\",\n      );\n    });\n\n    it(\"should throw on NaN decimals\", () => {\n      expect(() => calculateBalance(\"1000000\", NaN)).toThrow(\n        \"Decimals must be a non-negative integer\",\n      );\n    });\n  });\n\n  describe(\"Precision comparisons\", () => {\n    it(\"should maintain precision for large fractional parts\", () => {\n      const result1 = calculateBalance(\"4966487025\", 6);\n      const result2 = calculateBalance(\"4966487026\", 6);\n\n      expect(result1.formatted).toBe(\"4966.49\");\n      expect(result2.formatted).toBe(\"4966.49\"); // Both round to same value\n      expect(result1.value).not.toBe(result2.value); // But BigInt values are different\n    });\n\n    it(\"should handle precision at rounding boundaries\", () => {\n      const result1 = calculateBalance(\"1234999\", 6); // 1.234999\n      const result2 = calculateBalance(\"1235000\", 6); // 1.235000\n      const result3 = calculateBalance(\"1235001\", 6); // 1.235001\n\n      expect(result1.formatted).toBe(\"1.23\");\n      expect(result2.formatted).toBe(\"1.24\");\n      expect(result3.formatted).toBe(\"1.24\");\n    });\n  });\n\n  describe(\"Real world scenarios\", () => {\n    it(\"should handle typical credit amounts\", () => {\n      const scenarios = [\n        { amount: \"1000000\", decimals: 6, expected: \"1\" },\n        { amount: \"500000\", decimals: 6, expected: \"0.5\" },\n        { amount: \"1500000\", decimals: 6, expected: \"1.5\" },\n        { amount: \"123456789\", decimals: 6, expected: \"123.46\" },\n      ];\n\n      scenarios.forEach(({ amount, decimals, expected }) => {\n        const result = calculateBalance(amount, decimals);\n        expect(result.formatted).toBe(expected);\n      });\n    });\n\n    it(\"should handle typical token amounts\", () => {\n      const scenarios = [\n        { amount: \"1000000000000000000\", decimals: 18, expected: \"1\" }, // 1 ETH\n        { amount: \"500000000000000000\", decimals: 18, expected: \"0.5\" }, // 0.5 ETH\n        { amount: \"1000000\", decimals: 6, expected: \"1\" }, // 1 USDC\n        { amount: \"1500000\", decimals: 6, expected: \"1.5\" }, // 1.5 USDC\n      ];\n\n      scenarios.forEach(({ amount, decimals, expected }) => {\n        const result = calculateBalance(amount, decimals);\n        expect(result.formatted).toBe(expected);\n      });\n    });\n  });\n});\n"]}