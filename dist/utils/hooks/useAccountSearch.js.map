{"version":3,"file":"useAccountSearch.js","sourceRoot":"","sources":["../../../src/utils/hooks/useAccountSearch.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { useAccountSearchQuery } from \"../api/cartridge/generated\";\n\nexport interface AccountSearchResult {\n  id: string;\n  type: \"existing\" | \"create-new\";\n  username: string;\n  points?: number;\n  lastOnline?: Date;\n}\n\nexport interface UseAccountSearchOptions {\n  minLength?: number;\n  debounceMs?: number;\n  maxResults?: number;\n}\n\nexport interface UseAccountSearchResult {\n  results: AccountSearchResult[];\n  isLoading: boolean;\n  error?: Error;\n}\n\nfunction useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nexport function useAccountSearch(\n  query: string,\n  options: UseAccountSearchOptions = {},\n): UseAccountSearchResult {\n  const { minLength = 1, debounceMs = 300, maxResults = 5 } = options;\n\n  const debouncedQuery = useDebounce(query.trim().toLowerCase(), debounceMs);\n  const shouldSearch = debouncedQuery.length >= minLength;\n\n  const { data, isLoading, error } = useAccountSearchQuery(\n    {\n      query: debouncedQuery,\n      limit: maxResults,\n    },\n    {\n      enabled: shouldSearch,\n      staleTime: 30 * 1000, // 30 seconds\n      cacheTime: 5 * 60 * 1000, // 5 minutes\n    },\n  );\n\n  const results = useMemo(() => {\n    if (!shouldSearch) return [];\n\n    const accountResults: AccountSearchResult[] = [];\n\n    // Add existing accounts from search results\n    if (data?.searchAccounts) {\n      accountResults.push(\n        ...data.searchAccounts.map((user) => {\n          const points = user.credits\n            ? Math.floor(\n                Number(user.credits.amount) /\n                  Math.pow(10, user.credits.decimals),\n              )\n            : undefined;\n\n          return {\n            id: `existing-${user.username}`,\n            type: \"existing\" as const,\n            username: user.username,\n            points: points,\n            lastOnline: user.updatedAt ? new Date(user.updatedAt) : undefined,\n          };\n        }),\n      );\n    }\n\n    // Check if exact match exists\n    const exactMatch = accountResults?.find(\n      (result) =>\n        result.username.toLowerCase() === debouncedQuery.toLowerCase(),\n    );\n\n    // If no exact match, add \"Create New\" option\n    if (!exactMatch && debouncedQuery.length >= 3) {\n      accountResults.unshift({\n        id: `create-new-${debouncedQuery}`,\n        type: \"create-new\",\n        username: debouncedQuery,\n      });\n    }\n\n    return accountResults;\n  }, [data, debouncedQuery, shouldSearch]);\n\n  return {\n    results,\n    isLoading: shouldSearch && isLoading,\n    error: error as Error | undefined,\n  };\n}\n"]}