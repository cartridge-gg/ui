{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../src/utils/api/cartridge/context.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAa,MAAM,OAAO,CAAC;AAQjD,MAAM,YAAY,GAA4B;IAC5C,GAAG,EAAE,EAAE;CACR,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAC9B,aAAa,CAA0B,YAAY,CAAC,CAAC;AAEvD,MAAM,UAAU,oBAAoB,CAAC,EACnC,GAAG,EACH,WAAW,EACX,OAAO,EACP,QAAQ,GAMT;IACC,OAAO,CACL,KAAC,mBAAmB,CAAC,QAAQ,IAC3B,KAAK,EAAE,EAAE,GAAG,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,EAAE,YAEpD,QAAQ,GACoB,CAChC,CAAC;AACJ,CAAC","sourcesContent":["import { createContext, ReactNode } from \"react\";\n\ntype CartridgeAPIContextType = {\n  url: string;\n  credentials?: RequestInit[\"credentials\"];\n  headers?: RequestInit[\"headers\"];\n};\n\nconst initialState: CartridgeAPIContextType = {\n  url: \"\",\n};\n\nexport const CartridgeAPIContext =\n  createContext<CartridgeAPIContextType>(initialState);\n\nexport function CartridgeAPIProvider({\n  url,\n  credentials,\n  headers,\n  children,\n}: {\n  url: string;\n  credentials?: RequestInit[\"credentials\"];\n  headers?: RequestInit[\"headers\"];\n  children: ReactNode;\n}) {\n  return (\n    <CartridgeAPIContext.Provider\n      value={{ ...initialState, headers, credentials, url }}\n    >\n      {children}\n    </CartridgeAPIContext.Provider>\n  );\n}\n"]}