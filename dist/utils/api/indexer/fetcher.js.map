{"version":3,"file":"fetcher.js","sourceRoot":"","sources":["../../../../src/utils/api/indexer/fetcher.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAC9C,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAE5C,MAAM,UAAU,YAAY,CAC1B,KAAa,EACb,OAGC;IAED,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,aAAa,EAAE,CAAC;IAC7D,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;IAC1D,CAAC;IAED,MAAM,SAAS,GAAG,gBAAgB,CAAC,UAAU,EAAE;QAC7C,WAAW,EAAE,OAAO,EAAE,WAAW,IAAI,WAAW;QAChD,OAAO,EAAE;YACP,GAAG,OAAO;YACV,GAAG,OAAO,EAAE,OAAO;SACpB;KACF,CAAC,CAAC;IAEH,OAAO,CAAC,SAAsB,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AACjE,CAAC","sourcesContent":["import { fetchDataCreator } from \"../fetcher\";\nimport { useIndexerAPI } from \"../../hooks\";\n\nexport function useFetchData<TData, TVariables>(\n  query: string,\n  options?: {\n    credentials?: RequestInit[\"credentials\"];\n    headers?: RequestInit[\"headers\"];\n  },\n): (variables?: TVariables) => Promise<TData> {\n  const { indexerUrl, credentials, headers } = useIndexerAPI();\n  if (!indexerUrl) {\n    return () => Promise.reject(\"Indexer API is not ready\");\n  }\n\n  const fetchData = fetchDataCreator(indexerUrl, {\n    credentials: options?.credentials ?? credentials,\n    headers: {\n      ...headers,\n      ...options?.headers,\n    },\n  });\n\n  return (variables?: TVariables) => fetchData(query, variables);\n}\n"]}