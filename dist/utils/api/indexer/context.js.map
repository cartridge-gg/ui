{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../src/utils/api/indexer/context.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAa,QAAQ,EAAE,MAAM,OAAO,CAAC;AAU3D,MAAM,YAAY,GAA0B;IAC1C,aAAa,EAAE,GAAG,EAAE,GAAE,CAAC;IACvB,OAAO,EAAE,KAAK;CACf,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAC5B,aAAa,CAAwB,YAAY,CAAC,CAAC;AAErD,MAAM,UAAU,kBAAkB,CAAC,EACjC,WAAW,EACX,OAAO,EACP,QAAQ,GAKT;IACC,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IAEtE,OAAO,CACL,KAAC,iBAAiB,CAAC,QAAQ,IACzB,KAAK,EAAE;YACL,UAAU;YACV,aAAa;YACb,WAAW;YACX,OAAO;YACP,OAAO,EAAE,CAAC,CAAC,UAAU;SACtB,YAEA,QAAQ,GACkB,CAC9B,CAAC;AACJ,CAAC","sourcesContent":["import { createContext, ReactNode, useState } from \"react\";\n\ntype IndexerAPIContextType = {\n  indexerUrl?: string;\n  credentials?: RequestInit[\"credentials\"];\n  headers?: RequestInit[\"headers\"];\n  isReady: boolean;\n  setIndexerUrl: (url: string) => void;\n};\n\nconst initialState: IndexerAPIContextType = {\n  setIndexerUrl: () => {},\n  isReady: false,\n};\n\nexport const IndexerAPIContext =\n  createContext<IndexerAPIContextType>(initialState);\n\nexport function IndexerAPIProvider({\n  credentials,\n  headers,\n  children,\n}: {\n  credentials?: RequestInit[\"credentials\"];\n  headers?: RequestInit[\"headers\"];\n  children: ReactNode;\n}) {\n  const [indexerUrl, setIndexerUrl] = useState(initialState.indexerUrl);\n\n  return (\n    <IndexerAPIContext.Provider\n      value={{\n        indexerUrl,\n        setIndexerUrl,\n        credentials,\n        headers,\n        isReady: !!indexerUrl,\n      }}\n    >\n      {children}\n    </IndexerAPIContext.Provider>\n  );\n}\n"]}