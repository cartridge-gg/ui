{"version":3,"file":"fetcher.js","sourceRoot":"","sources":["../../../src/utils/api/fetcher.tsx"],"names":[],"mappings":"AAAA,MAAM,UAAU,gBAAgB,CAC9B,GAAW,EACX,OAGC;IAED,OAAO,KAAK,EACV,KAAa,EACb,SAAsB,EACtB,MAAoB,EACJ,EAAE;QAClB,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;YAC3B,MAAM,EAAE,MAAM;YACd,WAAW,EAAE,OAAO,EAAE,WAAW,IAAI,SAAS;YAC9C,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,GAAG,OAAO,EAAE,OAAO;aACpB;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,KAAK;gBACL,SAAS;aACV,CAAC;YACF,MAAM;SACP,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAE9B,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["export function fetchDataCreator(\n  url: string,\n  options?: {\n    credentials?: RequestInit[\"credentials\"];\n    headers?: RequestInit[\"headers\"];\n  },\n) {\n  return async <TData, TVariables>(\n    query: string,\n    variables?: TVariables,\n    signal?: AbortSignal,\n  ): Promise<TData> => {\n    const res = await fetch(url, {\n      method: \"POST\",\n      credentials: options?.credentials || \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers,\n      },\n      body: JSON.stringify({\n        query,\n        variables,\n      }),\n      signal,\n    });\n\n    const json = await res.json();\n\n    if (json.errors) {\n      const { message } = json.errors[0];\n      throw new Error(message);\n    }\n\n    return json.data;\n  };\n}\n"]}