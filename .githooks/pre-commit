#!/bin/bash

# Pre-commit hook that runs formatting, linting and tests on staged files
# Focuses on TypeScript/JavaScript files and related configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Running pre-commit checks...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)

if [[ -z "$STAGED_FILES" ]]; then
    echo -e "${YELLOW}No staged files found. Skipping pre-commit checks.${NC}"
    exit 0
fi

echo "Staged files:"
echo "$STAGED_FILES" | sed 's/^/  /'
echo

# Track which jobs need to run
RUN_TS_FORMAT=false
RUN_TS_LINT=false
RUN_BUILD=false
RUN_TESTS=false

# Check for TypeScript/JavaScript files and related configuration
if echo "$STAGED_FILES" | grep -qE '\.(ts|tsx|js|jsx|json)$|package\.json$|pnpm-lock\.yaml$|biome\.json$|tsconfig\.json$|\.storybook/|src/'; then
    RUN_TS_FORMAT=true
    RUN_TS_LINT=true
    RUN_BUILD=true
    RUN_TESTS=true
fi

# Track errors
ERRORS=0

# Get TypeScript/JavaScript files for processing
TS_FILES=()
if [[ "$RUN_TS_FORMAT" == "true" ]]; then
    while IFS= read -r file; do
        if [[ "$file" =~ \.(ts|tsx|js|jsx)$ ]] && [[ -f "$file" ]] && [[ "$file" =~ ^src/ ]]; then
            TS_FILES+=("$file")
        fi
    done <<< "$STAGED_FILES"
fi

# Run TypeScript/JavaScript formatting if needed
if [[ "$RUN_TS_FORMAT" == "true" ]] && [[ ${#TS_FILES[@]} -gt 0 ]]; then
    echo -e "${BLUE}Running TypeScript/JavaScript formatting...${NC}"
    
    if ! pnpm format "${TS_FILES[@]}"; then
        echo -e "${RED}Formatting failed${NC}"
        ((ERRORS++))
    else
        # Check if any files were modified by formatting
        MODIFIED_FILES=()
        for file in "${TS_FILES[@]}"; do
            if ! git diff --quiet "$file" 2>/dev/null; then
                MODIFIED_FILES+=("$file")
            fi
        done
        
        if [ ${#MODIFIED_FILES[@]} -gt 0 ]; then
            echo -e "${YELLOW}üìù The following files were formatted:${NC}"
            printf '%s\n' "${MODIFIED_FILES[@]}"
            echo -e "${YELLOW}Please stage these changes and commit again.${NC}"
            ((ERRORS++))
        fi
    fi
    echo
fi

# Run TypeScript/JavaScript linting if needed
if [[ "$RUN_TS_LINT" == "true" ]]; then
    echo -e "${BLUE}Running TypeScript/JavaScript linting...${NC}"
    
    if ! pnpm lint; then
        echo -e "${RED}Linting failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Run build if needed
if [[ "$RUN_BUILD" == "true" ]]; then
    echo -e "${BLUE}Running build...${NC}"
    
    if ! pnpm build; then
        echo -e "${RED}Build failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Run tests if needed
if [[ "$RUN_TESTS" == "true" ]]; then
    echo -e "${BLUE}Running tests...${NC}"
    
    if ! pnpm test:ci; then
        echo -e "${RED}Tests failed${NC}"
        ((ERRORS++))
    fi
    echo
fi

# Summary
if [[ $ERRORS -eq 0 ]]; then
    echo -e "${GREEN}‚úì All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}‚úó Pre-commit checks failed with $ERRORS error(s)${NC}"
    echo -e "${YELLOW}Fix the issues above and try committing again.${NC}"
    exit 1
fi